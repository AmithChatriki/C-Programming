#include<stdio.h>
#include<stdlib.h>
struct node
{
    int data;
    struct node *link;
};
typedef struct node nd;
nd *insertfront(nd *f)
{
    nd *t;
    
    if(f==0)
    {
        f=(nd*)malloc(sizeof(nd));
        printf("Enter the Element = ");
        scanf("%d",&(f->data));
        f->link=0;
        return f;
    }
    else
    {
        t=(nd*)malloc(sizeof(nd));
        printf("Enter the Element = ");
        scanf("%d",&(t->data));
        t->link=f;
        return t;
    }
}
nd *insertrear(nd *f)
{
    nd *last,*t;
    t=(nd*)malloc(sizeof(nd));
    printf("Enter the Element = ");
    scanf("%d",&(t->data));
    t->link=0;
    if(f==0)
      return t;
    last=(nd*)malloc(sizeof(nd));
    for(last=f;last->link!=0;last=last->link);
    last->link=t;
    return f;
}
nd *deletefront(nd *f)
{
    nd *t;
    if(f==0)
    {
        printf("List is Empty\n");
        return f;
    }
    if(f->link==0)
    {
        printf("%d\n",f->data);
        free(f);
        return 0;
    }
    t=(nd*)malloc(sizeof(nd));
    t=f->link;
    printf("%d\n",f->data);
    free(f);
    return t;
}
nd *deleterear(nd *f)
{
    nd *t,*p;
    if(f==0)
    {
        printf("List is Empty\n");
        return f;
    }
    if(f->link==0)
    {
        printf("%d\n",f->data);
        free(f);
        return 0;
    }
    for(p=0,t=f;t->link!=0;p=t,t=t->link);
    p->link=0;
    printf("%d\n",t->data);
    free(t);
    return f;
}
nd *insertatpos(nd *f)
{
    int cnt,pos;
    nd *t;
    if(f==0) 
      cnt=0;
    else
      for(t=f;t!=0;t=t->link,cnt++);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos>cnt+1 || pos<1)
    {
        printf("Insertion not possible!\n");
        return f;
    }
    if(pos==1)
    {
        f=insertfront(f);
        return f;
    }
    if(pos==cnt+1)
    {
        f=insertrear(f);
        return f;
    }
    nd *p,*c;
    pos--;
    for(p=0,c=f;pos!=0;p=c,c=c->link,pos--);
    p->link=insertfront(c);
    return f;
}
nd *deleteatpos(nd *f)
{
    nd *t;
    int pos,cnt;
    if(f==0) 
      cnt=0;
    else
      for(t=f;t!=0;t=t->link,cnt++);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos>cnt+1 || pos<1)
    {
        printf("Deletion not possible!\n");
        return f;
    }
    if(pos==1)
    {
        f=deletefront(f);
        return f;
    }
    if(pos==cnt+1)
    {
        f=deleterear(f);
        return f;
    }
    nd *p,*c;
    pos--;
    for(p=0,c=f;pos!=0;p=c,c=c->link,pos--);
    p->link=c->link;
    free(c);
    return f;
}
void display(nd *f)
{
    if(f==0)
    {
        printf("List is Empty\n");
        return;
    }
    printf("Contents of List are = \n");
    for(;f!=0;f=f->link)
      printf("%d\n",f->data);
}
int main()
{
    nd *first=0;
    int ch;
    for(;;)
    {
        printf("1.Insert Front\n2.Delete Front\n3.Insert Rear\n4.Delete Rear\n5.Insert at Position\n6.Delete at Position\n7.Display\n8.Exit\n");
        printf("Enter the Choice = ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1  : first=insertfront(first); break;
            case 2  : first=deletefront(first); break;
            case 3  : first=insertrear(first); break;
            case 4  : first=deleterear(first); break;
            case 5  : first=insertatpos(first); break;
            case 6  : first=deleteatpos(first); break;
            case 7  : display(first); break;
            default : exit(0);
        }
    }
    return 0;
}
