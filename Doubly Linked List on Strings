#include<stdio.h>
#include<stdlib.h>
#define MALLOC(p,s)\
        if(!(p=malloc(s)))\
        {\
          printf("Insufficient Memory\n");\
          exit(0);\
        }
struct dll
{
    struct dll *llink;
    char str[20];
    struct dll *rlink;
};
typedef struct dll *dp;
dp insertfront(dp f)
{
    dp t;
    MALLOC(t,sizeof(struct dll));
    printf("Enter the element = ");
    scanf("%s",(t->str));
    if(f==0)
    {
        t->rlink=0;
        t->llink=0;
        return t;
    }
    t->llink=0;
    t->rlink=f;
    return t;
}
dp deletefront(dp f)
{
    if(f==0)
    {
        printf("DLL is Empty\n");
        return f;
    }
    if(f->rlink==0)
    {
        printf("Deleted Element = ");
        printf("%s\n",f->str);
        free(f);
        return 0;
    }
    dp t;
    MALLOC(t,sizeof(struct dll));
    t=f->rlink;
    printf("Deleted Element = ");
    printf("%s\n",(f->str));
    free(f);
    return t;
}
dp insertrear(dp f)
{
    dp t;
    MALLOC(t,sizeof(struct dll));
    printf("Enter the element = ");
    scanf("%s",(t->str));
    t->rlink=0;
    if(f==0)
    {
        t->llink=0;
        return t;
    }
    dp last;
    MALLOC(last,sizeof(struct dll));
    for(last=f;last->rlink!=0;last=last->rlink);
    last->rlink=t;
    return f;    
}
dp deleterear(dp f)
{
    dp p,t;
    if(f==0)
    {
        printf("DLL is Empty\n");
        return f;
    }
    if(f->rlink==0)
    {
        printf("Deleted Element is = ");
        printf("%s\n",f->str);
        free(f);
        return 0;
    }
    for(p=0,t=f;t->rlink!=0;p=t,t=t->rlink);
    p->rlink=0;
    printf("Deleted Element is = ");
    printf("%s\n",t->str);
    free(t);
    return f;
}
dp insertatpos(dp f)
{
    int cnt=0,pos;
    dp t;
    if(f==0)
      cnt=0;
    else
      for(t=f;t!=0;t=t->rlink,cnt++);
    printf("Count = %d\n",cnt);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos<1 || pos>cnt+1)
    {
       printf("Insertion not Possible\n");
       return f;
    }
    if(pos==1)
    {
       f=insertfront(f);
       return f;
    }
    if(pos==cnt+1)
    {
       f=insertrear(f);
       return f;
    }
    dp p,c;
    pos--;
    for(p=0,c=f;pos!=0;p=c,c=c->rlink,pos--);
    p->rlink=insertfront(c);
    return f;  
        
}
dp deleteatpos(dp f)
{
    int cnt=0,pos;
    dp t;
    if(f==0)
      cnt=0;
    else
      for(t=f;t!=0;t=t->rlink,cnt++);
    printf("Count = %d\n",cnt);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos<1 || pos>cnt)
    {
       printf("Deletion not Possible\n");
       return f;
    }
    if(pos==1)
    {
       f=deletefront(f);
       return f;
    }
    if(pos==cnt)
    {
       f=deleterear(f);
       return f;
    }
    dp p,c;
    pos--;
    for(p=0,c=f;pos!=0;p=c,c=c->rlink,pos--);
    p->rlink=deletefront(c);
    return f; 
}
void display(dp f)
{
    if(f==0)
    {
        printf("DLL is Empty\n");
        return;
    }
    printf("Contents of DLL are = \n");
    for(;f!=0;f=f->rlink)
      printf("%s\n",f->str);
    
}
int main()
{
    dp first=0;
    int ch;
    for(;;)
    {
        printf("1.Insert Front\n2.Delete Front\n3.Insert Rear\n4.Delete Rear\n5.Insert at Position\n6.Delete at Position\n7.Display\n8.Exit\nEnter the Choice = ");
        scanf("%d",&ch);
        switch(ch)
        {
            case 1  : first = insertfront(first); break;
            case 2  : first = deletefront(first); break;
            case 3  : first = insertrear(first); break; 
            case 4  : first = deleterear(first); break;
            case 5  : first = insertatpos(first); break;
            case 6  : first = deleteatpos(first); break;
            case 7  : display(first); break;
            default : exit(0);
        }
    }
    return 0;
}
