#include<stdio.h>
#include<stdlib.h>
struct node
{
   int d;
   struct node *link;
};
typedef struct node *nd;
void insertrear(nd );
void deleterear(nd );
void insertatpos(nd );
void deleteatpos(nd );
void insertfront(nd );
void deletefront( nd );
void display(nd );
int main( )
{
    struct node header = {.link = &header};
    int ch;
    for(;;)
     {
         printf("1.Rear Insert\n2.Rear Delete\n3.Front Insert\n4.Front Delete\n5.Insert at Position\n6.Delete at Position\n7.Display\n8.Exit\nEnter the Choice = ");
         scanf("%d",&ch);
         switch(ch)
         {
             case 1  : insertrear(&header); break;
             case 2  : deleterear(&header); break;
             case 3  : insertfront(&header); break;
             case 4  : deletefront(&header); break;
             case 5  : insertatpos(&header); break;
             case 6  : deleteatpos(&header); break;
             case 7  : display(&header); break;
             default : return 0;
         }
     }
     return 0;
}
void deletefront(nd h)
{
   nd t;
   if (h->link == h)
   {
       printf("SCLL is empty\n"); return;
   }
   t = h->link;
   printf("Element Deleted = %d\n",t->d);
   h->link = t->link;
   free(t);
}
void insertfront(nd h)
{
    nd t =  (nd)malloc(sizeof(struct node));
    scanf("%d",&(t->d));
    t->link = h->link;
    h->link = t;
}
void insertatpos(nd h)
{
    int cnt=0,pos;
    nd t;
    if(h->link == h) 
      cnt=0;
    else
      for(t=h;t->link!=h;t=t->link,cnt++);
    printf("Count = %d\n",cnt);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos>cnt+1 || pos<1)
    {
        printf("Insertion not possible!\n");
        return;
    }
    if(pos==1)
    {
        i_f(h);
        return;
    }
    if(pos==cnt+1)
    {
        i_r(h);
        return;
    }
    nd p,c;
    pos--;
    for(p=0,c=h;pos!=0;p=c,c=c->link,pos--);
    i_f(c);
    return;
}
void deleteatpos(nd h)
{
    nd t;
    int pos,cnt=0;
    if(h->link == h) 
      cnt=0;
    else
      for(t=h;t->link!=h;t=t->link,cnt++);
    printf("Count = %d\n",cnt);
    printf("Enter the Position = ");
    scanf("%d",&pos);
    if(pos>cnt+1 || pos<1)
    {
        printf("Deletion not possible!\n");
        return;
    }
    if(pos==1)
    {
        d_f(h);
        return;
    }
    if(pos==cnt)
    {
        d_r(h);
        return;
    }
    nd p,c;
    pos;
    for(p=0,c=h;pos!=0;p=c,c=c->link,pos--);
    p->link=c->link;
    printf("Element Deleted = %d\n",c->d);
    free(c);
}
void insertrear(nd h)
{
    nd t;
    if (h->link == h)
    {
        i_f(h); 
        return;
    }
    t = (nd) malloc(sizeof(struct node));
    scanf("%d",&(t->d));
    nd l;
    for(l=h->link; l->link!=h ; l=l->link);
    t->link = l->link;
    l->link=t;
}
void deleterear(nd h)
{
   if(h->link == h)
   {
       printf("SCLL is empty\n"); return;
   }
   nd t,p;
   for(p=0,t=h;t->link!=h;p=t,t=t->link);
   p->link=h;
   printf("Element Deleted = %d\n",t->d);
   free(t);
}
void display(nd h)
{
    if (h->link == h)
    {
        printf("SCLL is empty\n"); return;
    }
    nd t;
    printf("Contents of CSLL = \n"); 
    for(t=h->link; t!=h ; t=t->link)
      printf("%d\n",t->d);
}
